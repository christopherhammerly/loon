myvars <- c("Subject","MD5","TrialType","Number","Element","Experiment","Item", "Question", "Response","null","RT")
#<- c() = combines all values in a list into one variable
data.all <- read.csv('/Users/chrishammerly/loon/loon/analysis/loonresults.txt',
header=0,
sep=",",
comment.char="#",
col.names=mycols,
fill = TRUE)
#bringing the results into R, read.csv implies comma separated values
myvars <- c("Subject","MD5","TrialType","Number","Element","Experiment","Item", "Question", "Response","null","RT")
#<- c() = combines all values in a list into one variable
data.all <- read.csv('/Users/chrishammerly/loon/loon/analysis/loonresults.txt',
header=0,
sep=",",
comment.char="#",
col.names=myvars,
fill = TRUE)
#bringing the results into R, read.csv implies comma separated values
View(data.all)
myvars <- c("Subj","MD5","TrialType","Number","Element","Experiment","Item", "Question", "Response","null","RT")
#<- c() = combines all values in a list into one variable
data.all <- read.csv('/Users/chrishammerly/loon/loon/analysis/loonresults.txt',
header=0,
sep=",",
comment.char="#",
col.names=myvars,
fill = TRUE)
#bringing the results into R, read.csv implies comma separated values
answers <- read.delim('/Users/chrishammerly/loon/loon/analysis/loonanswers.txt',
header=1,
sep=",")
answers <- read.delim('/Users/chrishammerly/loon/loon/analysis/answers.txt',
header=1,
sep=",")
View(answers)
library(tidyverse)
mycols <- c("Subject","MD5","TrialType","Number","Element","Experiment","Item", "Question", "Response","null","RT")
data.all <- read.csv('/Users/chrishammerly/Desktop/Loon/main/results.txt',
header = 0,
sep = ",",
quote = "",
comment.char = "#",
col.names=mycols,
fill = TRUE)
answers <- read.delim('/Users/chrishammerly/Desktop/Loon/main/answers.txt',
header = 1,
sep = ",")
answers$Item <- as.factor(as.character(answers$Item))
data.age <- droplevels(subset(data.all, Experiment == "intro" & Question == "age"))
data.instruction <- droplevels(subset(data.all, Experiment == "prepractice"))
data.age$Response <- as.numeric(as.character(data.age$Response))
mean(data.age$Response)
View(data.age)
View(data.age)
myvars <- c("Subject","MD5","TrialType","Number","Element","Experiment","Item", "Question", "Response","null","RT")
#<- c() = combines all values in a list into one variable
data.all <- read.csv('/Users/chrishammerly/loon/loon/analysis/loonresults.txt',
header=0,
sep=",",
comment.char="#",
col.names=myvars,
fill = TRUE)
#bringing the results into R, read.csv implies comma separated values
answers <- read.delim('/Users/chrishammerly/loon/loon/analysis/answers.txt',
header=1,
sep=",")
#bringing answers into R, read.delim implies file is formatted as a table
answers$Item <- as.factor(as.character(answers$Item))
#defines column "Item" in "answers" dataframe
data.age <- droplevels(subset(data.all, Experiment == "intro" & Question == "age"))
#data.age defining which data deals with the age of the participants
#droplevels removes unwanted levels from the factor data.all except for what comes after the comma
data.instruction <- droplevels(subset(data.all, Experiment == "prepractice"))
#similar to above
data.age$Response <- as.numeric(as.character(data.age$Response))
#defines column "Response" in "data.age" dataframe
mean(data.age$Response)
#calculating the mean of the factor data.age$Response
data.exp <- droplevels(subset(data.all, Experiment %in% c("LOON-AnimInsitu","LOON-AnimMoved","LOON-InanInsitu","LOON-InanMoved") & Question == "NULL"))
#defining which data from the experiment is relevant
#"%in%" checks if item is contained within a certain vector or dataframe
#this is finding where "Experiment" is within the list defined after "c(" and excepting what it finds from the droplevel
xtabs(~Item + Experiment, data = data.exp)
#xtabs creates a table (based on the factors Item and Experiment using data.exp?)
data.exp$Displacement <- ifelse(data.exp$Experiment=='LOON-AnimInsitu' | data.exp$Experiment=='LOON-InanInsitu', 'In Situ', 'Moved')
#defines column "Displacement" in "data.exp" dataframe
#ifelse(test_expression, x, y), if test_expression is true return x, if false return y
#here, x=in situ and y=moved
#this basically is categorizing data from the experiment based on displacement
data.exp$Animacy <- ifelse(data.exp$Experiment=='LOON-AnimInsitu' | data.exp$Experiment=='LOON-AnimMoved', 'Animate', 'Inanimate')
#defines column "Animacy" in "data.exp" dataframe
#ifelse(test_expression, x, y), if test_expression is true return x, if false return y
#here, x=animate and y=inanimate
#this basically is categorizing data from the experiment based on displacement
data.exp <- left_join(data.exp,answers)
library(tidyverse)
data.exp <- left_join(data.exp,answers)
data.exp$Displacement
View(data.exp)
View(data.exp)
myvars <- c("Subject","MD5","TrialType","Number","Element","Experiment","Item", "Question", "Response","null","RT")
#<- c() = combines all values in a list into one variable
data.all <- read.csv('/Users/chrishammerly/loon/loon/analysis/loonresults.txt',
header=0,
sep=",",
comment.char="#",
col.names=myvars,
fill = TRUE)
#bringing the results into R, read.csv implies comma separated values
answers <- read.delim('/Users/chrishammerly/loon/loon/analysis/answers.txt',
header=1,
sep=",")
#bringing answers into R, read.delim implies file is formatted as a table
answers$Item <- as.factor(as.character(answers$Item))
#defines column "Item" in "answers" dataframe
data.age <- droplevels(subset(data.all, Experiment == "intro" & Question == "age"))
#data.age defining which data deals with the age of the participants
#droplevels removes unwanted levels from the factor data.all except for what comes after the comma
data.instruction <- droplevels(subset(data.all, Experiment == "prepractice"))
#similar to above
data.age$Response <- as.numeric(as.character(data.age$Response))
#defines column "Response" in "data.age" dataframe
mean(data.age$Response)
#calculating the mean of the factor data.age$Response
data.exp <- droplevels(subset(data.all, Experiment %in% c("LOON-AnimInsitu","LOON-AnimMoved","LOON-InanInsitu","LOON-InanMoved") & Question == "NULL"))
#defining which data from the experiment is relevant
#"%in%" checks if item is contained within a certain vector or dataframe
#this is finding where "Experiment" is within the list defined after "c(" and excepting what it finds from the droplevel
xtabs(~Item + Experiment, data = data.exp)
#xtabs creates a table (based on the factors Item and Experiment using data.exp?)
data.exp$Displacement <- ifelse(data.exp$Experiment=='LOON-AnimInsitu' | data.exp$Experiment=='LOON-InanInsitu', 'In Situ', 'Moved')
#defines column "Displacement" in "data.exp" dataframe
#ifelse(test_expression, x, y), if test_expression is true return x, if false return y
#here, x=in situ and y=moved
#this basically is categorizing data from the experiment based on displacement
data.exp$Animacy <- ifelse(data.exp$Experiment=='LOON-AnimInsitu' | data.exp$Experiment=='LOON-AnimMoved', 'Animate', 'Inanimate')
#defines column "Animacy" in "data.exp" dataframe
#ifelse(test_expression, x, y), if test_expression is true return x, if false return y
#here, x=animate and y=inanimate
#this basically is categorizing data from the experiment based on displacement
data.exp2 <- left_join(data.exp,answers)
#joins two tables (data.exp and answers) together
View(answers)
View(data.exp2)
data.exp$PD <- as.character(data.exp$PD)
#defines column "PD" in table "data.exp" as a character
data.exp$Response <- as.character(data.exp$Response)
#defines column "Response" in table "data.exp" as a character
data.exp$Answer <- ifelse(data.exp$Response == data.exp$PD, 1, 0)
#defines column "answer" in "data.exp"
#if data.exp$Response is exactly equal to data.exp$PD, return 1 if true, 0 if false
View(data.instruction)
View(data.instruction)
View(data.all)
data.feedback <- droplevels(subset(data.all, Experiment == "debrief"))
View(data.feedback)
write.csv(data.feedback,"feedback.csv")
